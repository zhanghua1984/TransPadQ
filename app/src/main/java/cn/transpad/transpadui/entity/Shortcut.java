package cn.transpad.transpadui.entity;import android.os.Parcel;import android.os.Parcelable;/** * Created by Kongxiaojun on 2015/4/8. */public class Shortcut implements Parcelable {    public static final int APP_SHORTCUT_PAGE_TYPE = 1;    public static final int FILE_SHORTCUT_PAGE_TYPE = 2;    public static final int EXTENSION_IMAGE_TYPE = 1;    public static final int EXTENSION_OTHER_TYPE = 2;    private int id;    private String name;    /**     * 位置索引     */    private int index;    /**     * 启动路径(应用为包名,其他为路径)     */    private String shortcutPath;    /**     * Intent Action     */    private String activityName;    /**     * 是否安装     */    private boolean isInstall;    /**     * 图片地址     */    private String imageUrl;    /**     * 下载地址     */    private String downloadUrl;    /**     * 下载id     */    private int downloadId;    /**     * 下载进度     */    private int downloadProgress;    /**     * 文件长度     */    private int length;    /**     * 下载状态     */    private int downloadStateType;    /**     * 快捷方式类型     */    private int shortcutType;    public int mFileType;    public boolean isEdit() {        return mIsEdit;    }    public void setIsEdit(boolean isEdit) {        mIsEdit = isEdit;    }    /**     * 是否是编辑状态     */    private boolean mIsEdit;    private boolean select;    public int getShortcutType() {        return shortcutType;    }    public void setShortcutType(int shortcutType) {        this.shortcutType = shortcutType;    }    public int getId() {        return id;    }    public void setId(int id) {        this.id = id;    }    public String getName() {        return name;    }    public void setName(String name) {        this.name = name;    }    public void setIndex(int index) {        this.index = index;    }    public int getIndex() {        return index;    }    public String getShortcutPath() {        return shortcutPath;    }    public void setShortcutPath(String shortcutPath) {        this.shortcutPath = shortcutPath;    }    public boolean isInstall() {        return isInstall;    }    public void setIsInstall(boolean isInstall) {        this.isInstall = isInstall;    }    public int getLength() {        return length;    }    public void setLength(int length) {        this.length = length;    }    public String getActivityName() {        return activityName;    }    public void setActivityName(String activityName) {        this.activityName = activityName;    }    public boolean isSelect() {        return select;    }    public void setSelect(boolean select) {        this.select = select;    }    @Override    public int describeContents() {        return 0;    }    @Override    public void writeToParcel(Parcel dest, int flags) {        dest.writeString(this.shortcutPath);        dest.writeByte(isInstall ? (byte) 1 : (byte) 0);        dest.writeString(this.imageUrl);        dest.writeString(this.downloadUrl);        dest.writeInt(this.downloadId);        dest.writeInt(this.downloadProgress);        dest.writeInt(this.length);        dest.writeInt(this.downloadStateType);        dest.writeLong(this.id);        dest.writeString(this.name);        dest.writeString(this.activityName);        dest.writeInt(this.shortcutType);        dest.writeInt(select ? (byte)1 : (byte)0);    }    public Shortcut() {    }    private Shortcut(Parcel in) {        this.shortcutPath = in.readString();        this.isInstall = in.readByte() != 0;        this.imageUrl = in.readString();        this.downloadUrl = in.readString();        this.downloadId = in.readInt();        this.downloadProgress = in.readInt();        this.length = in.readInt();        this.downloadStateType = in.readInt();        this.id = in.readInt();        this.name = in.readString();        this.activityName = in.readString();        this.shortcutType = in.readInt();        this.select = in.readByte() != 0;    }    public static final Creator<Shortcut> CREATOR = new Creator<Shortcut>() {        public Shortcut createFromParcel(Parcel source) {            return new Shortcut(source);        }        public Shortcut[] newArray(int size) {            return new Shortcut[size];        }    };    @Override    public boolean equals(Object o) {        if (this == o) return true;        if (o == null || getClass() != o.getClass()) return false;        Shortcut shortcut = (Shortcut) o;        return !(activityName != null ? !activityName.equals(shortcut.activityName) : !(shortcutPath != null ? shortcutPath.equals(shortcut.shortcutPath) : shortcutPath != null));    }    @Override    public int hashCode() {        return activityName != null ? activityName.hashCode() : 0;    }}